import React, { useState, useMemo } from 'react';
import {
  Box,
  Grid,
  Typography,
  Chip,
  IconButton,
  Toolbar,
  AppBar,
  Menu,
  MenuItem,
  Button,
  TextField,
  InputAdornment,
  Fab,
  Tooltip,
  ToggleButtonGroup,
  ToggleButton,
} from '@mui/material';
import {
  GridOn as GridIcon,
  ViewList as ListIcon,
  FilterList,
  SortByAlpha,
  CheckSquare,
  Archive,
  Trash2,
  X,
  Plus,
  Search,
  ChevronDown,
} from 'lucide-react';
import { useApp } from '../context/AppContext';
import { TaskItem } from './TaskItem';

interface TaskListProps {
  onAddTask: () => void;
}

export const TaskList: React.FC<TaskListProps> = ({ onAddTask }) => {
  const { state, dispatch } = useApp();
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [categoryAnchorEl, setCategoryAnchorEl] = useState<null | HTMLElement>(null);
  const [sortAnchorEl, setSortAnchorEl] = useState<null | HTMLElement>(null);
  const [searchQuery, setSearchQuery] = useState('');

  // Filter and sort tasks
  const filteredAndSortedTasks = useMemo(() => {
    let filtered = state.tasks.filter(task => {
      // Filter by archive status (only show non-archived)
      if (task.isArchived && state.currentView !== 'archive') return false;
      if (!task.isArchived && state.currentView === 'archive') return false;

      // Filter by type
      if (state.currentFilter === 'tasks' && task.type !== 'task') return false;
      if (state.currentFilter === 'habits' && task.type !== 'habit') return false;

      // Filter by category
      if (state.selectedCategory && task.category !== state.selectedCategory) return false;

      // Filter by search query
      if (state.searchQuery) {
        const query = state.searchQuery.toLowerCase();
        return (
          task.title.toLowerCase().includes(query) ||
          task.description?.toLowerCase().includes(query) ||
          task.tags.some(tag => tag.toLowerCase().includes(query))
        );
      }

      return true;
    });

    // Sort tasks
    filtered.sort((a, b) => {
      switch (state.sortBy) {
        case 'deadline':
          if (!a.deadline && !b.deadline) return 0;
          if (!a.deadline) return 1;
          if (!b.deadline) return -1;
          return new Date(a.deadline).getTime() - new Date(b.deadline).getTime();
        case 'created':
          return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
        case 'updated':
          return new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime();
        case 'priority':
          const priorityOrder = { high: 3, medium: 2, low: 1 };
          return priorityOrder[b.priority] - priorityOrder[a.priority];
        default:
          return 0;
      }
    });

    return filtered;
  }, [state.tasks, state.currentFilter, state.selectedCategory, state.searchQuery, state.sortBy, state.currentView]);

  const handleFilterChange = (filter: typeof state.currentFilter) => {
    dispatch({ type: 'SET_FILTER', payload: filter });
  };

  const handleCategoryFilter = (categoryId: string | null) => {
    dispatch({ type: 'SET_CATEGORY', payload: categoryId });
    setCategoryDropdownOpen(false);
  };

  const handleSortChange = (sortBy: typeof state.sortBy) => {
    dispatch({ type: 'SET_SORT', payload: sortBy });
    setSortDropdownOpen(false);
  };

  const toggleMultiSelect = () => {
    dispatch({ type: 'TOGGLE_MULTI_SELECT' });
  };

  const handleBatchComplete = () => {
    const selectedTaskIds = Array.from(state.selectedTasks);
    dispatch({ type: 'BATCH_COMPLETE_TASKS', payload: selectedTaskIds });
  };

  const handleBatchDelete = () => {
    const selectedTaskIds = Array.from(state.selectedTasks);
    if (window.confirm(`确定要删除选中的 ${selectedTaskIds.length} 个项目吗？`)) {
      dispatch({ type: 'BATCH_DELETE_TASKS', payload: selectedTaskIds });
    }
  };

  const handleBatchArchive = () => {
    const selectedTaskIds = Array.from(state.selectedTasks);
    dispatch({ type: 'BATCH_ARCHIVE_TASKS', payload: selectedTaskIds });
  };

  const cancelMultiSelect = () => {
    dispatch({ type: 'TOGGLE_MULTI_SELECT' });
  };

  const taskStats = useMemo(() => {
    const total = filteredAndSortedTasks.length;
    const completed = filteredAndSortedTasks.filter(t => t.completed).length;
    const tasks = filteredAndSortedTasks.filter(t => t.type === 'task').length;
    const habits = filteredAndSortedTasks.filter(t => t.type === 'habit').length;
    const overdue = filteredAndSortedTasks.filter(t =>
      t.deadline && new Date(t.deadline) < new Date() && !t.completed
    ).length;
    return { total, completed, tasks, habits, overdue };
  }, [filteredAndSortedTasks]);

  return (
    <div className="flex-1 p-6" style={{ background: '#fafafa' }}>
      {/* Header with Material Design Cards */}
      <div className="mb-6">
        {/* Stats Cards */}
        <div className="grid grid-cols-2 gap-4 mb-6" style={{ gridTemplateColumns: 'repeat(4, 1fr)' }}>
          <div
            className="card p-4 text-center"
            style={{
              background: 'white',
              borderRadius: '12px',
              boxShadow: '0 2px 8px rgba(0,0,0,0.08)',
              border: '1px solid #e2e8f0'
            }}
          >
            <div className="text-2xl font-bold text-primary">{taskStats.total}</div>
            <div className="text-xs opacity-60">总项目</div>
          </div>
          <div
            className="card p-4 text-center"
            style={{
              background: 'white',
              borderRadius: '12px',
              boxShadow: '0 2px 8px rgba(0,0,0,0.08)',
              border: '1px solid #e2e8f0'
            }}
          >
            <div className="text-2xl font-bold text-success">{taskStats.completed}</div>
            <div className="text-xs opacity-60">已完成</div>
          </div>
          <div
            className="card p-4 text-center"
            style={{
              background: 'white',
              borderRadius: '12px',
              boxShadow: '0 2px 8px rgba(0,0,0,0.08)',
              border: '1px solid #e2e8f0'
            }}
          >
            <div className="text-2xl font-bold text-info">{taskStats.tasks}</div>
            <div className="text-xs opacity-60">任务</div>
          </div>
          <div
            className="card p-4 text-center"
            style={{
              background: 'white',
              borderRadius: '12px',
              boxShadow: '0 2px 8px rgba(0,0,0,0.08)',
              border: '1px solid #e2e8f0'
            }}
          >
            <div className="text-2xl font-bold text-secondary">{taskStats.habits}</div>
            <div className="text-xs opacity-60">习惯</div>
          </div>
        </div>

        {/* Main Header */}
        <div className="flex items-center justify-between mb-6">
          <div>
            <h1 className="text-3xl font-bold mb-2" style={{ color: '#1a202c' }}>
              {state.currentView === 'archive' ? '📦 存档中心' : '📋 任务管理'}
            </h1>
            <p className="opacity-60 text-base">
              {state.currentView === 'archive'
                ? `管理您的 ${taskStats.total} 个已存档项目`
                : `跟踪您的进度，管理 ${taskStats.total} 个项目`
              }
              {taskStats.overdue > 0 && (
                <span className="text-error ml-2 font-medium">
                  ⚠️ {taskStats.overdue} 个项目已逾期
                </span>
              )}
            </p>
          </div>

          <div className="flex items-center gap-3">
            {/* View Mode Toggle */}
            <div
              className="flex items-center"
              style={{
                background: 'white',
                borderRadius: '12px',
                padding: '4px',
                boxShadow: '0 2px 8px rgba(0,0,0,0.08)',
                border: '1px solid #e2e8f0'
              }}
            >
              <button
                onClick={() => setViewMode('list')}
                className={`btn btn-sm ${viewMode === 'list' ? 'btn-primary' : ''}`}
                style={{
                  padding: '8px 12px',
                  borderRadius: '8px',
                  border: 'none',
                  background: viewMode === 'list'
                    ? 'linear-gradient(135deg, #10b981 0%, #059669 100%)'
                    : 'transparent',
                  color: viewMode === 'list' ? 'white' : '#6b7280',
                  minHeight: 'auto',
                  height: 'auto'
                }}
              >
                <List size={16} />
              </button>
              <button
                onClick={() => setViewMode('grid')}
                className={`btn btn-sm ${viewMode === 'grid' ? 'btn-primary' : ''}`}
                style={{
                  padding: '8px 12px',
                  borderRadius: '8px',
                  border: 'none',
                  background: viewMode === 'grid'
                    ? 'linear-gradient(135deg, #10b981 0%, #059669 100%)'
                    : 'transparent',
                  color: viewMode === 'grid' ? 'white' : '#6b7280',
                  minHeight: 'auto',
                  height: 'auto'
                }}
              >
                <Grid size={16} />
              </button>
            </div>

            {/* Multi-select toggle */}
            <button
              onClick={toggleMultiSelect}
              className={`btn btn-sm ${state.isMultiSelectMode ? 'btn-primary' : 'btn-outline'}`}
              style={{
                padding: '10px 16px',
                borderRadius: '12px',
                background: state.isMultiSelectMode
                  ? 'linear-gradient(135deg, #10b981 0%, #059669 100%)'
                  : 'white',
                border: '2px solid #e2e8f0',
                color: state.isMultiSelectMode ? 'white' : '#374151',
                fontWeight: 500,
                boxShadow: '0 2px 8px rgba(0,0,0,0.05)',
                minHeight: 'auto',
                height: 'auto'
              }}
            >
              <CheckSquare size={16} />
              多选模式
            </button>

            {/* Add Task Button */}
            <button
              onClick={onAddTask}
              className="btn btn-primary btn-sm"
              style={{
                padding: '12px 20px',
                borderRadius: '12px',
                background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
                border: 'none',
                color: 'white',
                fontWeight: 600,
                boxShadow: '0 4px 16px rgba(16, 185, 129, 0.3)',
                minHeight: 'auto',
                height: 'auto'
              }}
            >
              <Plus size={16} />
              新建任务
            </button>
          </div>
        </div>

        {/* Filters and Sort - Material Design Style */}
        <div
          className="flex items-center gap-4 flex-wrap p-4"
          style={{
            background: 'white',
            borderRadius: '16px',
            boxShadow: '0 2px 12px rgba(0,0,0,0.08)',
            border: '1px solid #e2e8f0'
          }}
        >
          {/* Type filters */}
          <div className="flex items-center gap-3">
            <div className="flex items-center gap-2">
              <Filter size={16} style={{ color: '#6b7280' }} />
              <span className="text-sm font-medium opacity-80">筛选:</span>
            </div>
            <div className="flex items-center gap-2">
              {[
                { key: 'all', label: '全部', icon: null, color: '#6b7280' },
                { key: 'tasks', label: '任务', icon: Target, color: '#3b82f6' },
                { key: 'habits', label: '习惯', icon: TrendingUp, color: '#8b5cf6' },
              ].map(({ key, label, icon: Icon, color }) => (
                <button
                  key={key}
                  onClick={() => handleFilterChange(key as any)}
                  className={`filter-btn btn btn-sm ${
                    state.currentFilter === key ? 'active' : ''
                  }`}
                  style={{
                    padding: '8px 16px',
                    borderRadius: '20px',
                    border: '2px solid #e2e8f0',
                    background: state.currentFilter === key
                      ? 'linear-gradient(135deg, #10b981 0%, #059669 100%)'
                      : 'white',
                    color: state.currentFilter === key ? 'white' : color,
                    fontWeight: 500,
                    minHeight: 'auto',
                    height: 'auto',
                    transition: 'all 0.2s ease',
                    boxShadow: state.currentFilter === key
                      ? '0 4px 12px rgba(16, 185, 129, 0.3)'
                      : '0 1px 3px rgba(0,0,0,0.05)'
                  }}
                  data-filter={key}
                >
                  {Icon && <Icon size={14} />}
                  {label}
                </button>
              ))}
            </div>
          </div>

          {/* Category filter */}
          <div className="dropdown relative">
            <button
              className="btn btn-sm btn-outline flex items-center gap-2"
              onClick={() => setCategoryDropdownOpen(!categoryDropdownOpen)}
              style={{
                padding: '8px 16px',
                borderRadius: '20px',
                border: '2px solid #e2e8f0',
                background: 'white',
                color: '#374151',
                fontWeight: 500,
                minHeight: 'auto',
                height: 'auto',
                boxShadow: '0 1px 3px rgba(0,0,0,0.05)'
              }}
            >
              <span>分类</span>
              {state.selectedCategory && (
                <span
                  className="ml-1"
                  style={{
                    background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
                    color: 'white',
                    padding: '2px 6px',
                    borderRadius: '8px',
                    fontSize: '10px',
                    fontWeight: 600
                  }}
                >
                  1
                </span>
              )}
              <ChevronDown size={14} />
            </button>
            {categoryDropdownOpen && (
              <ul
                className="dropdown-content menu shadow-lg bg-base-100 border border-base-300 z-10"
                style={{
                  position: 'absolute',
                  top: '100%',
                  left: 0,
                  marginTop: '8px',
                  minWidth: '200px',
                  borderRadius: '12px',
                  visibility: 'visible',
                  opacity: 1,
                  background: 'white',
                  boxShadow: '0 8px 32px rgba(0,0,0,0.12)',
                  border: '1px solid #e2e8f0',
                  overflow: 'hidden'
                }}
                onMouseLeave={() => setCategoryDropdownOpen(false)}
              >
                <li>
                  <button
                    onClick={() => handleCategoryFilter(null)}
                    className={!state.selectedCategory ? 'active' : ''}
                    style={{
                      padding: '12px 16px',
                      borderRadius: '0',
                      border: 'none',
                      background: !state.selectedCategory ? '#f0fdf4' : 'transparent',
                      width: '100%',
                      textAlign: 'left',
                      fontSize: '14px',
                      fontWeight: 500,
                      color: !state.selectedCategory ? '#10b981' : '#374151'
                    }}
                  >
                    全部分类
                  </button>
                </li>
                <div className="divider" style={{ margin: '4px 0', background: '#e2e8f0', height: '1px' }}></div>
                {state.categories.map((category) => (
                  <li key={category.id}>
                    <button
                      onClick={() => handleCategoryFilter(category.id)}
                      className={`flex items-center gap-3 ${
                        state.selectedCategory === category.id ? 'active' : ''
                      }`}
                      style={{
                        padding: '12px 16px',
                        borderRadius: '0',
                        border: 'none',
                        background: state.selectedCategory === category.id ? '#f0fdf4' : 'transparent',
                        width: '100%',
                        textAlign: 'left',
                        fontSize: '14px',
                        fontWeight: 500,
                        color: state.selectedCategory === category.id ? '#10b981' : '#374151'
                      }}
                    >
                      <div
                        className="w-3 h-3 rounded-full"
                        style={{ backgroundColor: category.color }}
                      ></div>
                      {category.name}
                    </button>
                  </li>
                ))}
              </ul>
            )}
          </div>

          {/* Sort */}
          <div className="dropdown relative">
            <button
              className="btn btn-sm btn-outline flex items-center gap-2"
              onClick={() => setSortDropdownOpen(!sortDropdownOpen)}
              style={{
                padding: '8px 16px',
                borderRadius: '20px',
                border: '2px solid #e2e8f0',
                background: 'white',
                color: '#374151',
                fontWeight: 500,
                minHeight: 'auto',
                height: 'auto',
                boxShadow: '0 1px 3px rgba(0,0,0,0.05)'
              }}
            >
              <SortAsc size={14} />
              <span>排序</span>
              <ChevronDown size={14} />
            </button>
            {sortDropdownOpen && (
              <ul
                className="dropdown-content menu shadow-lg bg-base-100 border border-base-300 z-10"
                style={{
                  position: 'absolute',
                  top: '100%',
                  left: 0,
                  marginTop: '8px',
                  minWidth: '160px',
                  borderRadius: '12px',
                  visibility: 'visible',
                  opacity: 1,
                  background: 'white',
                  boxShadow: '0 8px 32px rgba(0,0,0,0.12)',
                  border: '1px solid #e2e8f0',
                  overflow: 'hidden'
                }}
                onMouseLeave={() => setSortDropdownOpen(false)}
              >
                {[
                  { key: 'deadline', label: '截止时间' },
                  { key: 'created', label: '创建时间' },
                  { key: 'updated', label: '更新时间' },
                  { key: 'priority', label: '优先级' },
                ].map(({ key, label }) => (
                  <li key={key}>
                    <button
                      onClick={() => handleSortChange(key as any)}
                      className={state.sortBy === key ? 'active' : ''}
                      style={{
                        padding: '12px 16px',
                        borderRadius: '0',
                        border: 'none',
                        background: state.sortBy === key ? '#f0fdf4' : 'transparent',
                        width: '100%',
                        textAlign: 'left',
                        fontSize: '14px',
                        fontWeight: 500,
                        color: state.sortBy === key ? '#10b981' : '#374151'
                      }}
                    >
                      {label}
                    </button>
                  </li>
                ))}
              </ul>
            )}
          </div>

          {/* Clear filters */}
          {(state.selectedCategory || state.searchQuery) && (
            <button
              onClick={() => {
                dispatch({ type: 'SET_CATEGORY', payload: null });
                dispatch({ type: 'SET_SEARCH_QUERY', payload: '' });
              }}
              className="btn btn-sm btn-ghost opacity-60"
              style={{
                padding: '8px 12px',
                borderRadius: '20px',
                background: 'transparent',
                border: 'none',
                color: '#6b7280',
                minHeight: 'auto',
                height: 'auto'
              }}
            >
              <X size={14} />
              清除筛选
            </button>
          )}
        </div>
      </div>

      {/* Multi-select toolbar - Material Design FAB style */}
      {state.isMultiSelectMode && state.selectedTasks.size > 0 && (
        <div
          className="fixed bottom-8 bg-base-100 shadow-lg p-4 flex items-center gap-4 z-50"
          style={{
            left: '50%',
            transform: 'translateX(-50%)',
            borderRadius: '24px',
            background: 'white',
            boxShadow: '0 8px 32px rgba(0,0,0,0.15)',
            border: '1px solid #e2e8f0'
          }}
        >
          <div className="flex items-center gap-2">
            <div
              className="w-8 h-8 flex items-center justify-center"
              style={{
                background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
                borderRadius: '50%',
                color: 'white',
                fontSize: '12px',
                fontWeight: 600
              }}
            >
              {state.selectedTasks.size}
            </div>
            <span className="text-sm font-medium">个项目已选择</span>
          </div>

          <div className="flex items-center gap-2">
            <button
              onClick={handleBatchComplete}
              className="btn btn-sm btn-success"
              style={{
                padding: '8px 12px',
                borderRadius: '10px',
                background: 'linear-gradient(135deg, #22c55e 0%, #16a34a 100%)',
                border: 'none',
                color: 'white',
                minHeight: 'auto',
                height: 'auto'
              }}
            >
              <CheckSquare size={14} />
              完成
            </button>
            <button
              onClick={handleBatchArchive}
              className="btn btn-sm btn-info"
              style={{
                padding: '8px 12px',
                borderRadius: '10px',
                background: 'linear-gradient(135deg, #3b82f6 0%, #2563eb 100%)',
                border: 'none',
                color: 'white',
                minHeight: 'auto',
                height: 'auto'
              }}
            >
              <Archive size={14} />
              存档
            </button>
            <button
              onClick={handleBatchDelete}
              className="btn btn-sm btn-error"
              style={{
                padding: '8px 12px',
                borderRadius: '10px',
                background: 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)',
                border: 'none',
                color: 'white',
                minHeight: 'auto',
                height: 'auto'
              }}
            >
              <Trash2 size={14} />
              删除
            </button>
            <div className="divider-horizontal" style={{ margin: '0 8px' }}></div>
            <button
              onClick={cancelMultiSelect}
              className="btn btn-sm btn-ghost"
              style={{
                padding: '8px 12px',
                borderRadius: '10px',
                background: 'transparent',
                border: 'none',
                color: '#6b7280',
                minHeight: 'auto',
                height: 'auto'
              }}
            >
              <X size={14} />
              取消
            </button>
          </div>
        </div>
      )}

      {/* Task List Container */}
      <div
        className={`task-list-container ${
          state.isMultiSelectMode ? 'multi-select-mode' : ''
        }`}
        style={{
          background: 'transparent',
          borderRadius: '16px'
        }}
      >
        {filteredAndSortedTasks.length === 0 ? (
          <div
            className="text-center py-16 px-8"
            style={{
              background: 'white',
              borderRadius: '16px',
              border: '2px dashed #d1d5db',
              boxShadow: '0 4px 16px rgba(0,0,0,0.04)'
            }}
          >
            <div className="max-w-md" style={{ margin: '0 auto' }}>
              <div className="text-8xl mb-6">
                {state.searchQuery || state.selectedCategory
                  ? '🔍'
                  : state.currentView === 'archive'
                  ? '📦'
                  : '📋'
                }
              </div>
              <h3 className="text-2xl font-bold mb-3" style={{ color: '#1a202c' }}>
                {state.searchQuery || state.selectedCategory
                  ? '没有找到匹配的项目'
                  : state.currentView === 'archive'
                  ? '还没有存档的项目'
                  : '开始您的效率之旅'
                }
              </h3>
              <p className="opacity-60 mb-8 text-base leading-relaxed">
                {state.searchQuery || state.selectedCategory
                  ? '尝试调整筛选条件或创建新的任务'
                  : state.currentView === 'archive'
                  ? '完成的任务和习惯会自动存档到这里'
                  : '创建您的第一个任务或习惯，开始高效管理您的时间'
                }
              </p>
              {(!state.searchQuery && !state.selectedCategory && state.currentView !== 'archive') && (
                <button
                  onClick={onAddTask}
                  className="btn btn-primary"
                  style={{
                    padding: '14px 28px',
                    borderRadius: '12px',
                    background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
                    border: 'none',
                    color: 'white',
                    fontWeight: 600,
                    fontSize: '16px',
                    boxShadow: '0 6px 20px rgba(16, 185, 129, 0.4)',
                    minHeight: 'auto',
                    height: 'auto'
                  }}
                >
                  <Plus size={18} />
                  创建第一个任务
                </button>
              )}
            </div>
          </div>
        ) : (
          <div className={viewMode === 'grid' ? 'grid grid-cols-1 gap-6' : 'space-y-4'}>
            {filteredAndSortedTasks.map((task) => (
              <TaskItem key={task.id} task={task} />
            ))}
          </div>
        )}
      </div>
    </div>
  );
};